/*
package tga.folder_sync.it.local_to_local

import org.junit.Before
import org.junit.Test
import tga.folder_sync.init.Init
import tga.folder_sync.it.foldersShouldBeTheSame
import tga.folder_sync.it.localFolderStructure
import tga.folder_sync.it.localRootFolder
import tga.folder_sync.it.syncPlanShouldBe
import tga.folder_sync.sync.Sync
import java.io.File
import java.text.SimpleDateFormat
import java.util.*
import kotlin.test.assertTrue

class IT_set1_emptyDst {
    @Before fun waitSec() { Thread.sleep(1000) }

    @Test fun set1_partialSync() {
        val exclusions = listOf("sub-1", "sub-2", "sub-4")

        // prepare test data
        val sourceFolderName = prepareSource()
        val destinationFolderName = prepareDestination()

        // perform ta test action
        val init = Init("target\\", Date(),  "init", sourceFolderName, destinationFolderName)
        val outDirName = init.perform()

        val planFile = File("$outDirName/plan.txt")
        val planLines = planFile.readLines().toTypedArray()
        for (i in 0 until planLines.size) {
            val l = planLines[i]

            if (l[0] != '#') {
                if (exclusions.any{ l.contains(it) } ) {
                    planLines[i] = '+' + l.substring(1)
                }
            }
        }

        planFile.printWriter().use { out ->
            planLines.forEach( out::println )
        }

        val sync = Sync(outDirName)
        sync.perform()

        for (f in exclusions ) {
            val folder = File("$localRootFolder/tests-set1/src/$f")
            assertTrue { folder.exists() }
            folder.deleteRecursively()
        }

        foldersShouldBeTheSame(sourceFolderName, destinationFolderName)
    }


    private fun prepareSource() = localFolderStructure("tests-set1/src") {
        Txt("file0")
        Fld("sub-1") {
            Fld("sub-1-1") { Txt("file-1-1.01") }
            Txt("file-1.01")
            Txt("file-1.02")
        }
        Fld("sub-2") {
            Fld("sub-2-1") {
                Txt("file-2-1.01")
                Txt("file-2-1.02")
            }
        }
        Fld("sub-3") {
            Fld("sub-3-1")
            Txt("file-3.01")
        }
        Fld("sub-4") {
            Fld("sub-4-1") {}
        }
        Fld("sub-5")
    }

    private fun prepareDestination() = localFolderStructure("tests-set1/dst")

}
*/
